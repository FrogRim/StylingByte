# -*- coding: utf-8 -*-
"""FaceRecognition_forAgeGender.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1f3-aS91jlNUTegXflDQnQEtVYH_22O8f
"""

!nvidia-smi

"""# **CNN 모델로 얼굴의 나이와 성별 맞추기**
- OpenCV와 CNN을 이용
- Kaggle의 UTK FACE DATA SET을 이용하여 구축
- reference_ (url = https://m.blog.naver.com/PostView.naver?blogId=koreadeep&logNo=222585045313&proxyReferer=)

# **Google Drive에서 Kaggle 데이터 불러오기**
"""

pwd

from google.colab import drive
drive.mount('/content/drive')

datasetPath = "./drive/MyDrive/Colab/2024_StylingByte/dataset"

!unzip -qq '/content/drive/MyDrive/Colab/2024_StylingByte/dataset/UTKFace.zip' -d '/content/'

"""# **데이터 확인하기**

### [1] Import Library
"""

import pandas as pd
import numpy as np
import os
import matplotlib.pyplot as plt
from glob import glob

"""### [2] Convert Data to Dataframe
- DATA: AGE_GENDER_RACE_DATETIME.jpg
"""

folder_name = 'UTKFace'

# 숫자로 표현되어있는 인종, 성별 데이터를 문자열로 변환해주기 위한 dictionary 생성
dataset_dict = {
    'race_id': {
        0: 'white',
        1: 'black',
        2: 'asian',
        3: 'indian',
        4: 'others'
    },
    'gender_id': {
        0: 'male',
        1: 'female'
    }
}

dataset_dict['gender_alias'] = dict((g, i) for i, g in dataset_dict['gender_id'].items())
dataset_dict['race_alias'] = dict((g, i) for i, g in dataset_dict['race_id'].items())

# 데이터 프레임으로 만들어주기 위한 함수 지정
def parse_dataset(dataset_path, ext='jpg'):

    def parse_info_from_file(path):
        try:
            filename = os.path.split(path)[1]
            filename = os.path.splitext(filename)[0]
            age, gender, race, _ = filename.split('_')

            return int(age), dataset_dict['gender_id'][int(gender)], dataset_dict['race_id'][int(race)]
        except Exception as ex:
            return None, None, None

    files = glob(os.path.join(dataset_path, "*.%s" % ext))

    records = []
    for file in files:
        info = parse_info_from_file(file)
        records.append(info)

    df = pd.DataFrame(records)
    df['file'] = files
    df.columns = ['age', 'gender', 'race', 'file']
    df = df.dropna()

    return df

df = parse_dataset(folder_name)

# 데이터 프레임 출력
df.head()

df.count()

"""### [3] Extract Asians from Data"""

df_original = df.copy()

idx =df[df['race']!='asian'].index
df = df.drop(idx)

df.head()

df.count()

"""### [4] Show Distribution of Race and Gender"""

import plotly.graph_objects as go

def plot_distribution(pd_series):
    labels = pd_series.value_counts().index.tolist()
    counts = pd_series.value_counts().values.tolist()

    pie_plot = go.Pie(labels=labels, values=counts, hole=.3)
    fig = go.Figure(data=[pie_plot])
    fig.update_layout(title_text='Distribution for %s' % pd_series.name)

    fig.show()

plot_distribution(df['race'])

plot_distribution(df['gender'])

bins = [0, 10, 20, 30, 40, 60, 80, np.inf]
names = ['<10', '10-20', '20-30', '30-40', '40-60', '60-80', '80+']
age_binned = pd.cut(df['age'], bins, labels=names)
plot_distribution(age_binned)

"""# **CNN 모델 만들기**

### [1] Import Library
"""

import cv2
from tensorflow.keras.models import Model, Sequential, load_model
from tensorflow.keras.layers import BatchNormalization, Conv2D, MaxPool2D, Activation, Dropout, Lambda, Dense, Flatten, Input
import tensorflow as tf
import tensorflow.keras as keras
from tensorflow.keras.callbacks import EarlyStopping
from sklearn.model_selection import train_test_split
from tqdm import tqdm
from tensorflow.keras import backend as k
import seaborn as sns

"""### [2] Create Data Set for Learning"""

# 데이터를 np.array 형태로 저장
images = []
age = []
gender = []
race = []
for img in os.listdir(folder_name):
    races = img.split("_")[2]
    if races == '2':
        ages = img.split("_")[0]
        genders = img.split("_")[1]
        img = cv2.imread(str(folder_name)+"/"+str(img))
        img = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)
        img = img
        images.append(np.array(img))
        age.append(np.array(ages))
        gender.append(np.array(genders))

age = np.array(age,dtype=np.int64)
images = np.array(images)
gender = np.array(gender,dtype=np.uint64)

images[0].shape

# 데이터를 Training, Validation, Testing로 구분
x_train_age, x_test_age, y_train_age, y_test_age = train_test_split(images, age,  test_size=0.4, random_state=42)
x_valid_age, x_test_age, y_valid_age, y_test_age = train_test_split(x_test_age, y_test_age, test_size=0.5, random_state=42)

x_train_gender, x_test_gender, y_train_gender, y_test_gender = train_test_split(images, gender,  test_size=0.4, random_state=42)
x_valid_gender, x_test_gender, y_valid_gender, y_test_gender = train_test_split(x_test_gender, y_test_gender, test_size=0.5, random_state=42)

"""### [3] Create Model

"""

#learning rate 설정
from tensorflow.keras.optimizers import Adam
init_lr = 1e-4
epochs = 50
opt = Adam(learning_rate=init_lr / epochs)

# age_model
age_model = Sequential([
    Conv2D(128, kernel_size =3, input_shape=(200,200,3)),
    BatchNormalization(),
    Activation('relu'),
    MaxPool2D(pool_size=3, strides=2),
    Conv2D(128, kernel_size =3),
    BatchNormalization(),
    Activation('relu'),
    MaxPool2D(pool_size=3, strides=2),
    Conv2D(256, kernel_size =3),
    BatchNormalization(),
    Activation('relu'),
    MaxPool2D(pool_size=3, strides=2),
    Conv2D(512, kernel_size =3),
    BatchNormalization(),
    Activation('relu'),
    MaxPool2D(pool_size=3, strides=2),
    Flatten(),
    Dropout(0.25),
    Dense(512, activation  = 'relu'),
    Dense(1, activation = 'linear', name = 'age')
])
age_model.compile(loss="mse", optimizer=opt, metrics = ['mae'])

#gender model
gender_model = Sequential([
    Conv2D(36, kernel_size=3,input_shape=(200,200,3)),
    BatchNormalization(),
    Activation('relu'),
    MaxPool2D(pool_size=3, strides=2),
    Conv2D(64, kernel_size=3),
    BatchNormalization(),
    Activation('relu'),
    MaxPool2D(pool_size=3, strides=2),
    Conv2D(128, kernel_size=3),
    BatchNormalization(),
    Activation('relu'),
    MaxPool2D(pool_size=3, strides=2),
    Conv2D(256, kernel_size=3),
    BatchNormalization(),
    Activation('relu'),
    MaxPool2D(pool_size=3, strides=2),
    Conv2D(512, kernel_size=3),
    BatchNormalization(),
    Activation('relu'),
    MaxPool2D(pool_size=3, strides=2),
    Flatten(),
    Dropout(0.25),
    Dense(512, activation  = 'relu'),
    Dense(1, activation = 'sigmoid', name = 'gender')
])
gender_model.compile(optimizer=opt, loss='binary_crossentropy', metrics=['accuracy'])

from tensorflow.keras.callbacks import ModelCheckpoint

# 과적합 방지를 위한 callback 설정
callbacks = [EarlyStopping(monitor='val_loss',
                                           patience=5),
             ModelCheckpoint(filepath='./model-{epoch:02d}-{val_loss:.2f}.h5',
                                             monitor='val_loss',
                                             save_best_only=True)]

"""### [4] Learning"""

#age_model 학습
history_age = age_model.fit(x_train_age, y_train_age,
                        validation_data=(x_valid_age, y_valid_age), batch_size = 32, epochs=50, callbacks = callbacks)

# 모델 저장
age_model.save('age_model_test.h5')

#gender_model 학습
history_gender = gender_model.fit(x_train_gender, y_train_gender,
                        validation_data=(x_valid_gender, y_valid_gender), batch_size=32, epochs=50, callbacks = callbacks)

# 모델 저장
gender_model.save('gender_model_test.h5')

"""### [5] Save and Download Model"""

from google.colab import files
import shutil

modelPath = "./drive/MyDrive/Colab/2024_StylingByte/model"

shutil.copy('age_model_test.h5', modelPath)

shutil.copy('gender_model_test.h5', modelPath)

"""### [6] Check Learing Curve"""

history = history_age
loss = history.history['loss']
val_loss = history.history['val_loss']
epochs = range(1, len(loss) + 1)
plt.plot(epochs, loss, 'y', label='Training loss')
plt.plot(epochs, val_loss, 'r', label='Validation loss')
plt.title('Age model Training and validation loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.ylim(0,300)
plt.legend()
plt.show()

history = history_gender
loss = history.history['loss']
val_loss = history.history['val_loss']
epochs = range(1, len(loss) + 1)
plt.plot(epochs, loss, 'y', label='Training loss')
plt.plot(epochs, val_loss, 'r', label='Validation loss')
plt.title('Gender Training and validation loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.show()

len(x_test_age)

y_test_age[0]

age_preds = age_model.predict(x_test_age)

gender_preds = gender_model.predict(x_test_gender)

"""# **모델 성능 확인하기**

### [1] Import Library
"""

from sklearn.metrics import mean_absolute_error, accuracy_score, recall_score, precision_score, confusion_matrix, classification_report

"""### [2] Learning Result"""

# 나이의 오차 평균
age_mae = mean_absolute_error(y_test_age, age_preds)

age_mae

# 성별의 정확도
gender_accuracy = accuracy_score(y_test_gender, np.round(gender_preds))

gender_accuracy

"""### [3] Show 16 Images"""

plt.hist(gender_preds.ravel())

print(classification_report(y_test_gender,np.round(gender_preds)))

confusion_matrix(y_test_gender,np.round(gender_preds))

import math
n=16
random_indices = np.random.choice(len(x_test_age), size=n)
n_cols = 4
n_rows = math.ceil(n / n_cols)
fig, axes = plt.subplots(n_rows, n_cols, figsize=(15, 17))
for i, x in enumerate(random_indices):
   ax = axes.flat[i]
   ax.imshow(x_test_age[x])
   real_age = y_test_age[x]
   predict_age = age_preds[x]
   if y_test_gender[x] == 1:
     real_gender = 'female'
   else:
     real_gender = 'male'
   if np.round(gender_preds[x]) == 1:
     predict_gender = 'female'
   else:
     predict_gender ='male'
   ax.set_title('real_age: {}, real_gender: {}'.format(int(real_age),real_gender))
   ax.set_xlabel('predict_age: {}, predict_gender: {}'.format(int(predict_age),predict_gender))
   ax.xaxis.label.set_color('red')

# PC에 모델 저장
files.download('age_model_test.h5')
files.download('gender_model_test.h5')